apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      initContainers:
      - name: init-db
        image: postgres:17
        command: ["/bin/bash", "-c"]
        args:
        - |
          set -e
          echo "Waiting for PostgreSQL to be ready..."
          until pg_isready -h postgres -U postgres; do
            sleep 1
          done
          echo "PostgreSQL is ready, checking if dvdrental data exists..."
          if ! PGPASSWORD=postgres psql -h postgres -U postgres -d postgres -c "SELECT 1 FROM information_schema.tables WHERE table_name='actor' LIMIT 1;" > /dev/null 2>&1; then
            echo "Loading dvdrental database..."
            PGPASSWORD=postgres pg_restore -h postgres -U postgres -d postgres /data/dvdrental.tar
            echo "Database loaded successfully"
          else
            echo "Database already loaded, skipping"
          fi
        volumeMounts:
        - name: dvdrental-data
          mountPath: /data
        env:
        - name: PGPASSWORD
          value: postgres
      containers:
      - name: postgres
        image: postgres:17
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          value: postgres
        - name: POSTGRES_DB
          value: postgres
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: dvdrental-data
        configMap:
          name: dvdrental-data
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: default
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: default
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi